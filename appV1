import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';

import 'dart:async';
import 'package:path/path.dart' show join;
import 'package:path_provider/path_provider.dart';

Future<void> main() async {
  // Ensure that plugin services are initialized so that `availableCameras()`
  // can be called before `runApp()`
  WidgetsFlutterBinding.ensureInitialized();

  // Obtain a list of the available cameras on the device.
  final cameras = await availableCameras();

  // Get a specific camera from the list of available cameras.
  final firstCamera = cameras.first;
  runApp(MyApp());
}

// A screen that takes in a list of cameras and the Directory to store images.
class TakePictureScreen extends StatefulWidget {
  final CameraDescription camera;

  const TakePictureScreen({
    Key key,
    @required this.camera,
  }) : super(key: key);

  @override
  TakePictureScreenState createState() => TakePictureScreenState();
}

class TakePictureScreenState extends State<TakePictureScreen> {
  CameraController _controller;
  Future<void> _initializeControllerFuture;

  @override
  void initState() {
    super.initState();
    // To display the current output from the Camera,
    // create a CameraController.
    _controller = CameraController(
      // Get a specific camera from the list of available cameras.
      widget.camera,
      // Define the resolution to use.
      ResolutionPreset.medium,
    );

    // Next, initialize the controller. This returns a Future.
    _initializeControllerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    // Dispose of the controller when the widget is disposed.
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Take a picture')),
      // Wait until the controller is initialized before displaying the
      // camera preview. Use a FutureBuilder to display a loading spinner
      // until the controller has finished initializing.
      body: FutureBuilder<void>(
        future: _initializeControllerFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            // If the Future is complete, display the preview.
            return CameraPreview(_controller);
          } else {
            // Otherwise, display a loading indicator.
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.camera_alt),
        // Provide an onPressed callback.
        onPressed: () async {
          // Take the Picture in a try / catch block. If anything goes wrong,
          // catch the error.
          try {
            // Ensure that the camera is initialized.
            await _initializeControllerFuture;

            // Construct the path where the image should be saved using the
            // pattern package.
            final path = join(
              // Store the picture in the temp directory.
              // Find the temp directory using the `path_provider` plugin.
              (await getTemporaryDirectory()).path,
              '${DateTime.now()}.png',
            );

            // Attempt to take a picture and log where it's been saved.
            await _controller.takePicture(path);

            // If the picture was taken, display it on a new screen.
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => Page2(imagePath: path),
              ),
            );
          } catch (e) {
            // If an error occurs, log the error to the console.
            print(e);
          }
        },
      ),
    );
  }
}



class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CSR',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: "CSR Page d'acceuil"),
    );

  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {


  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Column(
        children: <Widget>[
          Container(
            padding: EdgeInsets.symmetric(vertical: 10,horizontal: 10),
            margin: EdgeInsets.symmetric(vertical: 50,horizontal: 50),
            width: 300,
            height: 200,
            child: RaisedButton(
              onPressed: (){
                Navigator.push(context,
                    MaterialPageRoute<void>(
                        builder:(BuildContext context) {
                          return Page2();
                        }));

              },
              child: Text(
                'Signaler une pêche',
                style: TextStyle(color: Colors.white),
              ),
              color: Colors.lightBlueAccent,
              padding: EdgeInsets.fromLTRB(10, 10, 10, 10),
            ),
          ),
          Container(
            padding: EdgeInsets.symmetric(vertical: 10,horizontal: 10),
            width: 300,
            height: 200,
            child: RaisedButton(
              onPressed: (){

              },
              child: Text(
                'Informations sur les espèces',
                style: TextStyle(color: Colors.white),
              ),
              color: Colors.lightBlueAccent,
              padding: EdgeInsets.fromLTRB(10, 10, 10, 10),
            ),

          )

        ],
        ),
      drawer: Drawer(
        child: ListView(

          children: <Widget>[
            Container(
              child: Column(
                children: [
                  ListTile(
                    title: Text('Compte',
                    ),
                    leading: Icon(Icons.account_circle,
                      size: 50,),
                    onTap: (){
                    },
                  ),
                  SizedBox(height:20),
                  ListTile(
                    title: Text('Prendre une photo'),
                    leading: Icon(Icons.camera_alt, size: 50,),
                    onTap: (){
                    },
                  ),
                  SizedBox(height:20),
                  ListTile(
                    title: Text('Les requins'),
                    leading: Icon(Icons.add_circle_outline,size: 50),
                    onTap: (){
                    },
                  ),
                  SizedBox(height:20),
                  ListTile(
                    title: Text('Les raies'),
                    leading: Icon(Icons.add_circle_outline,size: 50),
                    onTap: (){
                    },
                  ),
                  SizedBox(height:300),
                  ListTile(
                    title: Text('Parametre'),
                    leading: Icon(Icons.settings,size: 50),
                    onTap: (){
                    },
                  ),
                ],
              ),

            ),

          ],

      ),
      ),
      );
  }
}

final controller = ScrollController();
class Page2 extends StatelessWidget {
  final String imagePath;
  const Page2({Key key, this.imagePath}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Signaler une pêche'),
      ),
      body: Center(
        child: Container(
          padding: EdgeInsets.all(10),
          child:MyCustomForm(),
          ) ,
      ),
    );
  }
}

// Create a Form widget.
class MyCustomForm extends StatefulWidget {
  @override
  MyCustomFormState createState() {
    return MyCustomFormState();
  }
}

// Create a corresponding State class.
// This class holds data related to the form.
class MyCustomFormState extends State<MyCustomForm> {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    // Build a Form widget using the _formKey created above.
    return Form(
      key: _formKey,
      child: ListView(
        children: <Widget>[
          TextFormField(
              decoration: const InputDecoration(
                  labelText: 'largeur',
                  hintText: 'Entrer du texte',
                  border: OutlineInputBorder()),

            validator: (value) {
              if (value.isEmpty) {
                return 'Please enter some text';
              }
              return null;
            },
          ),
          SizedBox(height: 50,),
          TextFormField(
            decoration: const InputDecoration(
                labelText: 'longueur',
                hintText: 'Entrer du texte',
                border: OutlineInputBorder()),
            validator: (value) {
              if (value.isEmpty) {
                return 'Please enter some text';
              }
              return null;
            },
          ),
          SizedBox(height: 50,),
          TextFormField(
            decoration: const InputDecoration(
                labelText: 'poids',
                hintText: 'Entrer du texte',
                border: OutlineInputBorder()),
            validator: (value) {
              if (value.isEmpty) {
                return 'Please enter some text';
              }
              return null;
            },
          ),
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 16.0),
            child: ElevatedButton(
              onPressed: () {
                if (_formKey.currentState.validate()) {
                  // If the form is valid, display a Snackbar.
                  Scaffold.of(context)
                     .showSnackBar(SnackBar(content: Text('Processing Data')));
                }
              },
              child: Text('Submit'),
            ),
          ),
        ],
      ),
    );
  }
}

